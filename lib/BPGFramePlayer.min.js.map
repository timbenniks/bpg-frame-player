{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///BPGFramePlayer.min.js","webpack:///webpack/bootstrap e2257888992e6a937f40","webpack:///./src/index.js","webpack:///./~/q/q.js","webpack:///./~/process/browser.js","webpack:///./~/timers-browserify/main.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_q","_q2","BPGFramePlayer","options","noop","defaultOptions","node","document","querySelector","width","height","loop","autoplay","fps","workerUrl","onFrameUpdate","onComplete","onLoaded","assign","playing","frameIndex","workerId","Math","random","toString","substring","url","Error","window","Worker","createCanvas","fcall","load","bind","then","setupWorker","done","bpgCanvas","createElement","classList","add","appendChild","ctx","getContext","_this","request","XMLHttpRequest","deferred","defer","open","responseType","onload","event","log","resolve","response","send","promise","bpgData","_this2","worker","addEventListener","e","data","type","message","terminate","postMessage","img","meta","bpgDecodedData","_this3","frames","remove","setTimeout","requestAnimationFrame","renderFrame","duration","draw","msg","console","frame","min","max","_this4","pause","dur","putImageData","process","setImmediate","definition","bootstrap","uncurryThis","f","apply","arguments","isObject","isStopIteration","exception","object_toString","QReturnValue","makeStackTraceLong","error","hasStacks","stack","indexOf","STACK_JUMP_SEPARATOR","stacks","source","unshift","concatedStacks","join","filterStackString","stackString","lines","split","desiredLines","line","isInternalFrame","isNodeFrame","push","stackLine","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qFileName","qStartingLine","qEndingLine","captureLine","firstLine","deprecate","callback","name","alternative","warn","Q","Promise","isPromiseAlike","coerce","fulfill","become","newPromise","resolvedPromise","array_reduce","messages","undefined","nextTick","promiseDispatch","progressListeners","object_create","op","operands","args","array_slice","valueOf","nearerValue","nearer","isPromise","inspect","state","longStackSupport","reject","reason","notify","progress","progressListener","resolver","race","answerPs","len","fallback","result","inspected","when","fulfilled","rejected","progressed","object","isPending","isFulfilled","isRejected","resetUnhandledRejections","unhandledReasons","unhandledRejections","trackUnhandledRejections","trackRejection","emit","runAfter","array_indexOf","reportedUnhandledRejections","untrackRejection","at","atReport","splice","rejection","get","set","rhs","delete","post","thisp","keys","object_keys","master","isDef","dispatch","spread","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","spawn","_return","promised","all","self","promises","pendingCount","index","snapshot","any","prev","current","onFulfilled","onRejected","onProgress","allResolved","array_map","allSettled","nodeify","nodeback","flush","task","domain","head","next","enter","runSingle","laterQueue","pop","flushing","isNodeJS","exit","tail","requestTick","MessageChannel","channel","port1","onmessage","requestPortTick","port2","Function","Array","slice","reduce","basis","map","collect","create","Type","object_hasOwnProperty","hasOwnProperty","ReturnValue","env","Q_DEBUG","makeNodeResolver","passByCopy","x","y","that","makePromise","_fulfilled","_rejected","newException","_progressed","newValue","threw","onerror","tap","thenResolve","thenReject","getUnhandledReasons","stopUnhandledRejectionTracking","array","del","mapply","mcall","invoke","fapply","fbind","concat","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","noConflict","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","run","Item","fun","title","browser","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","binding","cwd","chdir","dir","umask","clearImmediate","Timeout","clearFn","_id","_clearFn","immediateIds","nextImmediateId","setInterval","clearInterval","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","fn"],"mappings":"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","file":"BPGFramePlayer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"BPGFramePlayer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BPGFramePlayer\"] = factory();\n\telse\n\t\troot[\"BPGFramePlayer\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"BPGFramePlayer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BPGFramePlayer\"] = factory();\n\telse\n\t\troot[\"BPGFramePlayer\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _q = __webpack_require__(1);\n\t\n\tvar _q2 = _interopRequireDefault(_q);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * BPG Frame Player class\n\t * @class BPGFramePlayer\n\t */\n\t\n\tvar BPGFramePlayer = function () {\n\t\n\t  /**\n\t   * @typedef BPGFramePlayerOptions\n\t   * @type Object\n\t   * @property {object} node Dom node to append player to.\n\t   * @property {int} width Width of player\n\t   * @property {int} height Height of player\n\t   * @property {boolean} loop Loop frames?\n\t   * @property {boolean} autoplay Autoplay sequence?\n\t   * @property {string} url URL to the BPH file\n\t   * @property {float} fps FPS for the sequence player\n\t   * @property {string} workerUrl Where to load the webworker from\n\t   */\n\t\n\t  /**\n\t   * BPGFramePlayer constructor.\n\t   * @param {BPGFramePlayerOptions} options The default options of the frame player\n\t   * @constructs BPGFramePlayer\n\t   */\n\t\n\t  function BPGFramePlayer(options) {\n\t    _classCallCheck(this, BPGFramePlayer);\n\t\n\t    var noop = function noop() {};\n\t\n\t    var defaultOptions = {\n\t      node: document.querySelector('.bpg-frame-player'),\n\t      width: 600,\n\t      height: 300,\n\t      loop: true,\n\t      autoplay: true,\n\t      fps: 30,\n\t      workerUrl: '../lib/bpgdecoder.js',\n\t      onFrameUpdate: noop,\n\t      onComplete: noop,\n\t      onLoaded: noop\n\t    };\n\t\n\t    this.options = Object.assign(defaultOptions, options);\n\t\n\t    this.playing = this.options.autoplay;\n\t    this.frameIndex = 0;\n\t    this.workerId = ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n\t\n\t    if (!this.options.url) {\n\t      throw new Error('A BPG url is needed.');\n\t    }\n\t\n\t    if (!window.Worker) {\n\t      throw new Error('Cannot decode BPG files without web workers. See: http://caniuse.com/#feat=webworkers');\n\t    }\n\t\n\t    this.createCanvas();\n\t\n\t    _q2.default.fcall(this.load.bind(this)).then(this.setupWorker.bind(this)).then(this.onLoaded.bind(this)).done();\n\t  }\n\t\n\t  _createClass(BPGFramePlayer, [{\n\t    key: 'createCanvas',\n\t    value: function createCanvas() {\n\t      this.bpgCanvas = document.createElement('canvas');\n\t      this.bpgCanvas.width = this.options.width;\n\t      this.bpgCanvas.height = this.options.height;\n\t      this.bpgCanvas.classList.add('bpg-frame-player');\n\t\n\t      this.options.node.appendChild(this.bpgCanvas);\n\t      this.ctx = this.bpgCanvas.getContext('2d');\n\t    }\n\t  }, {\n\t    key: 'load',\n\t    value: function load() {\n\t      var _this = this;\n\t\n\t      var request = new XMLHttpRequest();\n\t      var deferred = _q2.default.defer();\n\t\n\t      this.options.node.classList.add('bpg-frame-player-loading');\n\t\n\t      request.open('get', this.options.url, true);\n\t      request.responseType = 'arraybuffer';\n\t      request.onload = function (event) {\n\t        _this.log('Requested: ' + _this.options.url);\n\t        deferred.resolve(request.response);\n\t      };\n\t      request.send();\n\t\n\t      return deferred.promise;\n\t    }\n\t  }, {\n\t    key: 'setupWorker',\n\t    value: function setupWorker(bpgData) {\n\t      var _this2 = this;\n\t\n\t      var deferred = _q2.default.defer(),\n\t          worker = new Worker(this.options.workerUrl);\n\t\n\t      worker.addEventListener('message', function (e) {\n\t        if (e.data.type === 'log') {\n\t          _this2.log('Decoding BPG: ' + e.data.message);\n\t        }\n\t\n\t        if (e.data.type === 'res') {\n\t          worker.terminate();\n\t          _this2.log('Decoded BPG: ' + _this2.options.url);\n\t          deferred.resolve(e.data);\n\t        }\n\t      });\n\t\n\t      worker.postMessage({ type: 'image', img: bpgData, meta: this.workerId });\n\t\n\t      return deferred.promise;\n\t    }\n\t  }, {\n\t    key: 'onLoaded',\n\t    value: function onLoaded(bpgDecodedData) {\n\t      var _this3 = this;\n\t\n\t      this.frames = bpgDecodedData.frames;\n\t\n\t      this.options.node.classList.remove('bpg-frame-player-loading');\n\t\n\t      // start sequence based on duration between first and second frame\n\t      setTimeout(function () {\n\t        requestAnimationFrame(_this3.renderFrame.bind(_this3));\n\t      }, this.frames[0].duration);\n\t\n\t      // render first frame\n\t      this.draw(0);\n\t\n\t      this.options.onLoaded(this.frames);\n\t    }\n\t  }, {\n\t    key: 'log',\n\t    value: function log(msg) {\n\t      console.log(msg);\n\t    }\n\t  }, {\n\t    key: 'goToFrame',\n\t    value: function goToFrame(frame) {\n\t      this.frameIndex = Math.min(Math.max(frame, 0), this.frames.length - 1);\n\t      this.draw(this.frameIndex);\n\t    }\n\t  }, {\n\t    key: 'play',\n\t    value: function play() {\n\t      this.playing = true;\n\t    }\n\t  }, {\n\t    key: 'pause',\n\t    value: function pause() {\n\t      this.playing = false;\n\t    }\n\t  }, {\n\t    key: 'renderFrame',\n\t    value: function renderFrame() {\n\t      var _this4 = this;\n\t\n\t      if (this.playing) {\n\t        if (++this.frameIndex >= this.frames.length) {\n\t          if (this.options.loop) {\n\t            this.frameIndex = 0;\n\t          } else {\n\t            this.frameIndex = this.frames.length - 1;\n\t            this.pause();\n\t            this.options.onComplete(this.frameIndex);\n\t          }\n\t        }\n\t\n\t        this.draw(this.frameIndex);\n\t      }\n\t\n\t      var dur = this.frames[this.frameIndex].duration;\n\t      setTimeout(function () {\n\t        requestAnimationFrame(_this4.renderFrame.bind(_this4));\n\t      }, dur);\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(frame) {\n\t      this.options.onFrameUpdate(frame, this.frames.length - 1);\n\t      this.ctx.putImageData(this.frames[frame].img, 0, 0);\n\t    }\n\t  }]);\n\t\n\t  return BPGFramePlayer;\n\t}();\n\n\texports.default = BPGFramePlayer;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// vim:ts=4:sts=4:sw=4:\n\t/*!\n\t *\n\t * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n\t * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n\t *\n\t * With parts by Tyler Close\n\t * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n\t * at http://www.opensource.org/licenses/mit-license.html\n\t * Forked at ref_send.js version: 2009-05-11\n\t *\n\t * With parts by Mark Miller\n\t * Copyright (C) 2011 Google Inc.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t */\n\t\n\t(function (definition) {\n\t    \"use strict\";\n\t\n\t    // This file will function properly as a <script> tag, or a module\n\t    // using CommonJS and NodeJS or RequireJS module formats.  In\n\t    // Common/Node/RequireJS, the module exports the Q API and when\n\t    // executed as a simple <script>, it creates a Q global instead.\n\t\n\t    // Montage Require\n\t    if (typeof bootstrap === \"function\") {\n\t        bootstrap(\"promise\", definition);\n\t\n\t    // CommonJS\n\t    } else if (true) {\n\t        module.exports = definition();\n\t\n\t    // RequireJS\n\t    } else if (typeof define === \"function\" && define.amd) {\n\t        define(definition);\n\t\n\t    // SES (Secure EcmaScript)\n\t    } else if (typeof ses !== \"undefined\") {\n\t        if (!ses.ok()) {\n\t            return;\n\t        } else {\n\t            ses.makeQ = definition;\n\t        }\n\t\n\t    // <script>\n\t    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n\t        // Prefer window over self for add-on scripts. Use self for\n\t        // non-windowed contexts.\n\t        var global = typeof window !== \"undefined\" ? window : self;\n\t\n\t        // Get the `window` object, save the previous Q global\n\t        // and initialize Q as a global.\n\t        var previousQ = global.Q;\n\t        global.Q = definition();\n\t\n\t        // Add a noConflict function so Q can be removed from the\n\t        // global namespace.\n\t        global.Q.noConflict = function () {\n\t            global.Q = previousQ;\n\t            return this;\n\t        };\n\t\n\t    } else {\n\t        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n\t    }\n\t\n\t})(function () {\n\t\"use strict\";\n\t\n\tvar hasStacks = false;\n\ttry {\n\t    throw new Error();\n\t} catch (e) {\n\t    hasStacks = !!e.stack;\n\t}\n\t\n\t// All code after this point will be filtered from stack traces reported\n\t// by Q.\n\tvar qStartingLine = captureLine();\n\tvar qFileName;\n\t\n\t// shims\n\t\n\t// used for fallback in \"allResolved\"\n\tvar noop = function () {};\n\t\n\t// Use the fastest possible means to execute a task in a future turn\n\t// of the event loop.\n\tvar nextTick =(function () {\n\t    // linked list of tasks (single, with head node)\n\t    var head = {task: void 0, next: null};\n\t    var tail = head;\n\t    var flushing = false;\n\t    var requestTick = void 0;\n\t    var isNodeJS = false;\n\t    // queue for late tasks, used by unhandled rejection tracking\n\t    var laterQueue = [];\n\t\n\t    function flush() {\n\t        /* jshint loopfunc: true */\n\t        var task, domain;\n\t\n\t        while (head.next) {\n\t            head = head.next;\n\t            task = head.task;\n\t            head.task = void 0;\n\t            domain = head.domain;\n\t\n\t            if (domain) {\n\t                head.domain = void 0;\n\t                domain.enter();\n\t            }\n\t            runSingle(task, domain);\n\t\n\t        }\n\t        while (laterQueue.length) {\n\t            task = laterQueue.pop();\n\t            runSingle(task);\n\t        }\n\t        flushing = false;\n\t    }\n\t    // runs a single function in the async queue\n\t    function runSingle(task, domain) {\n\t        try {\n\t            task();\n\t\n\t        } catch (e) {\n\t            if (isNodeJS) {\n\t                // In node, uncaught exceptions are considered fatal errors.\n\t                // Re-throw them synchronously to interrupt flushing!\n\t\n\t                // Ensure continuation if the uncaught exception is suppressed\n\t                // listening \"uncaughtException\" events (as domains does).\n\t                // Continue in next event to avoid tick recursion.\n\t                if (domain) {\n\t                    domain.exit();\n\t                }\n\t                setTimeout(flush, 0);\n\t                if (domain) {\n\t                    domain.enter();\n\t                }\n\t\n\t                throw e;\n\t\n\t            } else {\n\t                // In browsers, uncaught exceptions are not fatal.\n\t                // Re-throw them asynchronously to avoid slow-downs.\n\t                setTimeout(function () {\n\t                    throw e;\n\t                }, 0);\n\t            }\n\t        }\n\t\n\t        if (domain) {\n\t            domain.exit();\n\t        }\n\t    }\n\t\n\t    nextTick = function (task) {\n\t        tail = tail.next = {\n\t            task: task,\n\t            domain: isNodeJS && process.domain,\n\t            next: null\n\t        };\n\t\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\t\n\t    if (typeof process === \"object\" &&\n\t        process.toString() === \"[object process]\" && process.nextTick) {\n\t        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n\t        // To see through fake Node environments:\n\t        // * Mocha test runner - exposes a `process` global without a `nextTick`\n\t        // * Browserify - exposes a `process.nexTick` function that uses\n\t        //   `setTimeout`. In this case `setImmediate` is preferred because\n\t        //    it is faster. Browserify's `process.toString()` yields\n\t        //   \"[object Object]\", while in a real Node environment\n\t        //   `process.nextTick()` yields \"[object process]\".\n\t        isNodeJS = true;\n\t\n\t        requestTick = function () {\n\t            process.nextTick(flush);\n\t        };\n\t\n\t    } else if (typeof setImmediate === \"function\") {\n\t        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n\t        if (typeof window !== \"undefined\") {\n\t            requestTick = setImmediate.bind(window, flush);\n\t        } else {\n\t            requestTick = function () {\n\t                setImmediate(flush);\n\t            };\n\t        }\n\t\n\t    } else if (typeof MessageChannel !== \"undefined\") {\n\t        // modern browsers\n\t        // http://www.nonblocking.io/2011/06/windownexttick.html\n\t        var channel = new MessageChannel();\n\t        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n\t        // working message ports the first time a page loads.\n\t        channel.port1.onmessage = function () {\n\t            requestTick = requestPortTick;\n\t            channel.port1.onmessage = flush;\n\t            flush();\n\t        };\n\t        var requestPortTick = function () {\n\t            // Opera requires us to provide a message payload, regardless of\n\t            // whether we use it.\n\t            channel.port2.postMessage(0);\n\t        };\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t            requestPortTick();\n\t        };\n\t\n\t    } else {\n\t        // old browsers\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t        };\n\t    }\n\t    // runs a task after all other tasks have been run\n\t    // this is useful for unhandled rejection tracking that needs to happen\n\t    // after all `then`d tasks have been run.\n\t    nextTick.runAfter = function (task) {\n\t        laterQueue.push(task);\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\t    return nextTick;\n\t})();\n\t\n\t// Attempt to make generics safe in the face of downstream\n\t// modifications.\n\t// There is no situation where this is necessary.\n\t// If you need a security guarantee, these primordials need to be\n\t// deeply frozen anyway, and if you don’t need a security guarantee,\n\t// this is just plain paranoid.\n\t// However, this **might** have the nice side-effect of reducing the size of\n\t// the minified code by reducing x.call() to merely x()\n\t// See Mark Miller’s explanation of what this does.\n\t// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\tvar call = Function.call;\n\tfunction uncurryThis(f) {\n\t    return function () {\n\t        return call.apply(f, arguments);\n\t    };\n\t}\n\t// This is equivalent, but slower:\n\t// uncurryThis = Function_bind.bind(Function_bind.call);\n\t// http://jsperf.com/uncurrythis\n\t\n\tvar array_slice = uncurryThis(Array.prototype.slice);\n\t\n\tvar array_reduce = uncurryThis(\n\t    Array.prototype.reduce || function (callback, basis) {\n\t        var index = 0,\n\t            length = this.length;\n\t        // concerning the initial value, if one is not provided\n\t        if (arguments.length === 1) {\n\t            // seek to the first value in the array, accounting\n\t            // for the possibility that is is a sparse array\n\t            do {\n\t                if (index in this) {\n\t                    basis = this[index++];\n\t                    break;\n\t                }\n\t                if (++index >= length) {\n\t                    throw new TypeError();\n\t                }\n\t            } while (1);\n\t        }\n\t        // reduce\n\t        for (; index < length; index++) {\n\t            // account for the possibility that the array is sparse\n\t            if (index in this) {\n\t                basis = callback(basis, this[index], index);\n\t            }\n\t        }\n\t        return basis;\n\t    }\n\t);\n\t\n\tvar array_indexOf = uncurryThis(\n\t    Array.prototype.indexOf || function (value) {\n\t        // not a very good shim, but good enough for our one use of it\n\t        for (var i = 0; i < this.length; i++) {\n\t            if (this[i] === value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t);\n\t\n\tvar array_map = uncurryThis(\n\t    Array.prototype.map || function (callback, thisp) {\n\t        var self = this;\n\t        var collect = [];\n\t        array_reduce(self, function (undefined, value, index) {\n\t            collect.push(callback.call(thisp, value, index, self));\n\t        }, void 0);\n\t        return collect;\n\t    }\n\t);\n\t\n\tvar object_create = Object.create || function (prototype) {\n\t    function Type() { }\n\t    Type.prototype = prototype;\n\t    return new Type();\n\t};\n\t\n\tvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\t\n\tvar object_keys = Object.keys || function (object) {\n\t    var keys = [];\n\t    for (var key in object) {\n\t        if (object_hasOwnProperty(object, key)) {\n\t            keys.push(key);\n\t        }\n\t    }\n\t    return keys;\n\t};\n\t\n\tvar object_toString = uncurryThis(Object.prototype.toString);\n\t\n\tfunction isObject(value) {\n\t    return value === Object(value);\n\t}\n\t\n\t// generator related shims\n\t\n\t// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\tfunction isStopIteration(exception) {\n\t    return (\n\t        object_toString(exception) === \"[object StopIteration]\" ||\n\t        exception instanceof QReturnValue\n\t    );\n\t}\n\t\n\t// FIXME: Remove this helper and Q.return once ES6 generators are in\n\t// SpiderMonkey.\n\tvar QReturnValue;\n\tif (typeof ReturnValue !== \"undefined\") {\n\t    QReturnValue = ReturnValue;\n\t} else {\n\t    QReturnValue = function (value) {\n\t        this.value = value;\n\t    };\n\t}\n\t\n\t// long stack traces\n\t\n\tvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\t\n\tfunction makeStackTraceLong(error, promise) {\n\t    // If possible, transform the error stack trace by removing Node and Q\n\t    // cruft, then concatenating with the stack trace of `promise`. See #57.\n\t    if (hasStacks &&\n\t        promise.stack &&\n\t        typeof error === \"object\" &&\n\t        error !== null &&\n\t        error.stack &&\n\t        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n\t    ) {\n\t        var stacks = [];\n\t        for (var p = promise; !!p; p = p.source) {\n\t            if (p.stack) {\n\t                stacks.unshift(p.stack);\n\t            }\n\t        }\n\t        stacks.unshift(error.stack);\n\t\n\t        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n\t        error.stack = filterStackString(concatedStacks);\n\t    }\n\t}\n\t\n\tfunction filterStackString(stackString) {\n\t    var lines = stackString.split(\"\\n\");\n\t    var desiredLines = [];\n\t    for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i];\n\t\n\t        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n\t            desiredLines.push(line);\n\t        }\n\t    }\n\t    return desiredLines.join(\"\\n\");\n\t}\n\t\n\tfunction isNodeFrame(stackLine) {\n\t    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n\t           stackLine.indexOf(\"(node.js:\") !== -1;\n\t}\n\t\n\tfunction getFileNameAndLineNumber(stackLine) {\n\t    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n\t    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n\t    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\t    if (attempt1) {\n\t        return [attempt1[1], Number(attempt1[2])];\n\t    }\n\t\n\t    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\t    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\t    if (attempt2) {\n\t        return [attempt2[1], Number(attempt2[2])];\n\t    }\n\t\n\t    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\t    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\t    if (attempt3) {\n\t        return [attempt3[1], Number(attempt3[2])];\n\t    }\n\t}\n\t\n\tfunction isInternalFrame(stackLine) {\n\t    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\t\n\t    if (!fileNameAndLineNumber) {\n\t        return false;\n\t    }\n\t\n\t    var fileName = fileNameAndLineNumber[0];\n\t    var lineNumber = fileNameAndLineNumber[1];\n\t\n\t    return fileName === qFileName &&\n\t        lineNumber >= qStartingLine &&\n\t        lineNumber <= qEndingLine;\n\t}\n\t\n\t// discover own file name and line number range for filtering stack\n\t// traces\n\tfunction captureLine() {\n\t    if (!hasStacks) {\n\t        return;\n\t    }\n\t\n\t    try {\n\t        throw new Error();\n\t    } catch (e) {\n\t        var lines = e.stack.split(\"\\n\");\n\t        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n\t        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\t        if (!fileNameAndLineNumber) {\n\t            return;\n\t        }\n\t\n\t        qFileName = fileNameAndLineNumber[0];\n\t        return fileNameAndLineNumber[1];\n\t    }\n\t}\n\t\n\tfunction deprecate(callback, name, alternative) {\n\t    return function () {\n\t        if (typeof console !== \"undefined\" &&\n\t            typeof console.warn === \"function\") {\n\t            console.warn(name + \" is deprecated, use \" + alternative +\n\t                         \" instead.\", new Error(\"\").stack);\n\t        }\n\t        return callback.apply(callback, arguments);\n\t    };\n\t}\n\t\n\t// end of shims\n\t// beginning of real work\n\t\n\t/**\n\t * Constructs a promise for an immediate reference, passes promises through, or\n\t * coerces promises from different systems.\n\t * @param value immediate reference or promise\n\t */\n\tfunction Q(value) {\n\t    // If the object is already a Promise, return it directly.  This enables\n\t    // the resolve function to both be used to created references from objects,\n\t    // but to tolerably coerce non-promises to promises.\n\t    if (value instanceof Promise) {\n\t        return value;\n\t    }\n\t\n\t    // assimilate thenables\n\t    if (isPromiseAlike(value)) {\n\t        return coerce(value);\n\t    } else {\n\t        return fulfill(value);\n\t    }\n\t}\n\tQ.resolve = Q;\n\t\n\t/**\n\t * Performs a task in a future turn of the event loop.\n\t * @param {Function} task\n\t */\n\tQ.nextTick = nextTick;\n\t\n\t/**\n\t * Controls whether or not long stack traces will be on\n\t */\n\tQ.longStackSupport = false;\n\t\n\t// enable long stacks if Q_DEBUG is set\n\tif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n\t    Q.longStackSupport = true;\n\t}\n\t\n\t/**\n\t * Constructs a {promise, resolve, reject} object.\n\t *\n\t * `resolve` is a callback to invoke with a more resolved value for the\n\t * promise. To fulfill the promise, invoke `resolve` with any value that is\n\t * not a thenable. To reject the promise, invoke `resolve` with a rejected\n\t * thenable, or invoke `reject` with the reason directly. To resolve the\n\t * promise to another thenable, thus putting it in the same state, invoke\n\t * `resolve` with that other thenable.\n\t */\n\tQ.defer = defer;\n\tfunction defer() {\n\t    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n\t    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n\t    // element of the messages array is itself an array of complete arguments to\n\t    // forward to the resolved promise.  We coerce the resolution value to a\n\t    // promise using the `resolve` function because it handles both fully\n\t    // non-thenable values and other thenables gracefully.\n\t    var messages = [], progressListeners = [], resolvedPromise;\n\t\n\t    var deferred = object_create(defer.prototype);\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, operands) {\n\t        var args = array_slice(arguments);\n\t        if (messages) {\n\t            messages.push(args);\n\t            if (op === \"when\" && operands[1]) { // progress operand\n\t                progressListeners.push(operands[1]);\n\t            }\n\t        } else {\n\t            Q.nextTick(function () {\n\t                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n\t            });\n\t        }\n\t    };\n\t\n\t    // XXX deprecated\n\t    promise.valueOf = function () {\n\t        if (messages) {\n\t            return promise;\n\t        }\n\t        var nearerValue = nearer(resolvedPromise);\n\t        if (isPromise(nearerValue)) {\n\t            resolvedPromise = nearerValue; // shorten chain\n\t        }\n\t        return nearerValue;\n\t    };\n\t\n\t    promise.inspect = function () {\n\t        if (!resolvedPromise) {\n\t            return { state: \"pending\" };\n\t        }\n\t        return resolvedPromise.inspect();\n\t    };\n\t\n\t    if (Q.longStackSupport && hasStacks) {\n\t        try {\n\t            throw new Error();\n\t        } catch (e) {\n\t            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n\t            // accessor around; that causes memory leaks as per GH-111. Just\n\t            // reify the stack trace as a string ASAP.\n\t            //\n\t            // At the same time, cut off the first line; it's always just\n\t            // \"[object Promise]\\n\", as per the `toString`.\n\t            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n\t        }\n\t    }\n\t\n\t    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n\t    // consolidating them into `become`, since otherwise we'd create new\n\t    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\t\n\t    function become(newPromise) {\n\t        resolvedPromise = newPromise;\n\t        promise.source = newPromise;\n\t\n\t        array_reduce(messages, function (undefined, message) {\n\t            Q.nextTick(function () {\n\t                newPromise.promiseDispatch.apply(newPromise, message);\n\t            });\n\t        }, void 0);\n\t\n\t        messages = void 0;\n\t        progressListeners = void 0;\n\t    }\n\t\n\t    deferred.promise = promise;\n\t    deferred.resolve = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(Q(value));\n\t    };\n\t\n\t    deferred.fulfill = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(fulfill(value));\n\t    };\n\t    deferred.reject = function (reason) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(reject(reason));\n\t    };\n\t    deferred.notify = function (progress) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        array_reduce(progressListeners, function (undefined, progressListener) {\n\t            Q.nextTick(function () {\n\t                progressListener(progress);\n\t            });\n\t        }, void 0);\n\t    };\n\t\n\t    return deferred;\n\t}\n\t\n\t/**\n\t * Creates a Node-style callback that will resolve or reject the deferred\n\t * promise.\n\t * @returns a nodeback\n\t */\n\tdefer.prototype.makeNodeResolver = function () {\n\t    var self = this;\n\t    return function (error, value) {\n\t        if (error) {\n\t            self.reject(error);\n\t        } else if (arguments.length > 2) {\n\t            self.resolve(array_slice(arguments, 1));\n\t        } else {\n\t            self.resolve(value);\n\t        }\n\t    };\n\t};\n\t\n\t/**\n\t * @param resolver {Function} a function that returns nothing and accepts\n\t * the resolve, reject, and notify functions for a deferred.\n\t * @returns a promise that may be resolved with the given resolve and reject\n\t * functions, or rejected by a thrown exception in resolver\n\t */\n\tQ.Promise = promise; // ES6\n\tQ.promise = promise;\n\tfunction promise(resolver) {\n\t    if (typeof resolver !== \"function\") {\n\t        throw new TypeError(\"resolver must be a function.\");\n\t    }\n\t    var deferred = defer();\n\t    try {\n\t        resolver(deferred.resolve, deferred.reject, deferred.notify);\n\t    } catch (reason) {\n\t        deferred.reject(reason);\n\t    }\n\t    return deferred.promise;\n\t}\n\t\n\tpromise.race = race; // ES6\n\tpromise.all = all; // ES6\n\tpromise.reject = reject; // ES6\n\tpromise.resolve = Q; // ES6\n\t\n\t// XXX experimental.  This method is a way to denote that a local value is\n\t// serializable and should be immediately dispatched to a remote upon request,\n\t// instead of passing a reference.\n\tQ.passByCopy = function (object) {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return object;\n\t};\n\t\n\tPromise.prototype.passByCopy = function () {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return this;\n\t};\n\t\n\t/**\n\t * If two promises eventually fulfill to the same value, promises that value,\n\t * but otherwise rejects.\n\t * @param x {Any*}\n\t * @param y {Any*}\n\t * @returns {Any*} a promise for x and y if they are the same, but a rejection\n\t * otherwise.\n\t *\n\t */\n\tQ.join = function (x, y) {\n\t    return Q(x).join(y);\n\t};\n\t\n\tPromise.prototype.join = function (that) {\n\t    return Q([this, that]).spread(function (x, y) {\n\t        if (x === y) {\n\t            // TODO: \"===\" should be Object.is or equiv\n\t            return x;\n\t        } else {\n\t            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n\t        }\n\t    });\n\t};\n\t\n\t/**\n\t * Returns a promise for the first of an array of promises to become settled.\n\t * @param answers {Array[Any*]} promises to race\n\t * @returns {Any*} the first promise to be settled\n\t */\n\tQ.race = race;\n\tfunction race(answerPs) {\n\t    return promise(function (resolve, reject) {\n\t        // Switch to this once we can assume at least ES5\n\t        // answerPs.forEach(function (answerP) {\n\t        //     Q(answerP).then(resolve, reject);\n\t        // });\n\t        // Use this in the meantime\n\t        for (var i = 0, len = answerPs.length; i < len; i++) {\n\t            Q(answerPs[i]).then(resolve, reject);\n\t        }\n\t    });\n\t}\n\t\n\tPromise.prototype.race = function () {\n\t    return this.then(Q.race);\n\t};\n\t\n\t/**\n\t * Constructs a Promise with a promise descriptor object and optional fallback\n\t * function.  The descriptor contains methods like when(rejected), get(name),\n\t * set(name, value), post(name, args), and delete(name), which all\n\t * return either a value, a promise for a value, or a rejection.  The fallback\n\t * accepts the operation name, a resolver, and any further arguments that would\n\t * have been forwarded to the appropriate method above had a method been\n\t * provided with the proper name.  The API makes no guarantees about the nature\n\t * of the returned object, apart from that it is usable whereever promises are\n\t * bought and sold.\n\t */\n\tQ.makePromise = Promise;\n\tfunction Promise(descriptor, fallback, inspect) {\n\t    if (fallback === void 0) {\n\t        fallback = function (op) {\n\t            return reject(new Error(\n\t                \"Promise does not support operation: \" + op\n\t            ));\n\t        };\n\t    }\n\t    if (inspect === void 0) {\n\t        inspect = function () {\n\t            return {state: \"unknown\"};\n\t        };\n\t    }\n\t\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, args) {\n\t        var result;\n\t        try {\n\t            if (descriptor[op]) {\n\t                result = descriptor[op].apply(promise, args);\n\t            } else {\n\t                result = fallback.call(promise, op, args);\n\t            }\n\t        } catch (exception) {\n\t            result = reject(exception);\n\t        }\n\t        if (resolve) {\n\t            resolve(result);\n\t        }\n\t    };\n\t\n\t    promise.inspect = inspect;\n\t\n\t    // XXX deprecated `valueOf` and `exception` support\n\t    if (inspect) {\n\t        var inspected = inspect();\n\t        if (inspected.state === \"rejected\") {\n\t            promise.exception = inspected.reason;\n\t        }\n\t\n\t        promise.valueOf = function () {\n\t            var inspected = inspect();\n\t            if (inspected.state === \"pending\" ||\n\t                inspected.state === \"rejected\") {\n\t                return promise;\n\t            }\n\t            return inspected.value;\n\t        };\n\t    }\n\t\n\t    return promise;\n\t}\n\t\n\tPromise.prototype.toString = function () {\n\t    return \"[object Promise]\";\n\t};\n\t\n\tPromise.prototype.then = function (fulfilled, rejected, progressed) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    var done = false;   // ensure the untrusted promise makes at most a\n\t                        // single call to one of the callbacks\n\t\n\t    function _fulfilled(value) {\n\t        try {\n\t            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n\t        } catch (exception) {\n\t            return reject(exception);\n\t        }\n\t    }\n\t\n\t    function _rejected(exception) {\n\t        if (typeof rejected === \"function\") {\n\t            makeStackTraceLong(exception, self);\n\t            try {\n\t                return rejected(exception);\n\t            } catch (newException) {\n\t                return reject(newException);\n\t            }\n\t        }\n\t        return reject(exception);\n\t    }\n\t\n\t    function _progressed(value) {\n\t        return typeof progressed === \"function\" ? progressed(value) : value;\n\t    }\n\t\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(function (value) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_fulfilled(value));\n\t        }, \"when\", [function (exception) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_rejected(exception));\n\t        }]);\n\t    });\n\t\n\t    // Progress propagator need to be attached in the current tick.\n\t    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n\t        var newValue;\n\t        var threw = false;\n\t        try {\n\t            newValue = _progressed(value);\n\t        } catch (e) {\n\t            threw = true;\n\t            if (Q.onerror) {\n\t                Q.onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t\n\t        if (!threw) {\n\t            deferred.notify(newValue);\n\t        }\n\t    }]);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\tQ.tap = function (promise, callback) {\n\t    return Q(promise).tap(callback);\n\t};\n\t\n\t/**\n\t * Works almost like \"finally\", but not called for rejections.\n\t * Original resolution value is passed through callback unaffected.\n\t * Callback may return a promise that will be awaited for.\n\t * @param {Function} callback\n\t * @returns {Q.Promise}\n\t * @example\n\t * doSomething()\n\t *   .then(...)\n\t *   .tap(console.log)\n\t *   .then(...);\n\t */\n\tPromise.prototype.tap = function (callback) {\n\t    callback = Q(callback);\n\t\n\t    return this.then(function (value) {\n\t        return callback.fcall(value).thenResolve(value);\n\t    });\n\t};\n\t\n\t/**\n\t * Registers an observer on a promise.\n\t *\n\t * Guarantees:\n\t *\n\t * 1. that fulfilled and rejected will be called only once.\n\t * 2. that either the fulfilled callback or the rejected callback will be\n\t *    called, but not both.\n\t * 3. that fulfilled and rejected will not be called in this turn.\n\t *\n\t * @param value      promise or immediate reference to observe\n\t * @param fulfilled  function to be called with the fulfilled value\n\t * @param rejected   function to be called with the rejection exception\n\t * @param progressed function to be called on any progress notifications\n\t * @return promise for the return value from the invoked callback\n\t */\n\tQ.when = when;\n\tfunction when(value, fulfilled, rejected, progressed) {\n\t    return Q(value).then(fulfilled, rejected, progressed);\n\t}\n\t\n\tPromise.prototype.thenResolve = function (value) {\n\t    return this.then(function () { return value; });\n\t};\n\t\n\tQ.thenResolve = function (promise, value) {\n\t    return Q(promise).thenResolve(value);\n\t};\n\t\n\tPromise.prototype.thenReject = function (reason) {\n\t    return this.then(function () { throw reason; });\n\t};\n\t\n\tQ.thenReject = function (promise, reason) {\n\t    return Q(promise).thenReject(reason);\n\t};\n\t\n\t/**\n\t * If an object is not a promise, it is as \"near\" as possible.\n\t * If a promise is rejected, it is as \"near\" as possible too.\n\t * If it’s a fulfilled promise, the fulfillment value is nearer.\n\t * If it’s a deferred promise and the deferred has been resolved, the\n\t * resolution is \"nearer\".\n\t * @param object\n\t * @returns most resolved (nearest) form of the object\n\t */\n\t\n\t// XXX should we re-do this?\n\tQ.nearer = nearer;\n\tfunction nearer(value) {\n\t    if (isPromise(value)) {\n\t        var inspected = value.inspect();\n\t        if (inspected.state === \"fulfilled\") {\n\t            return inspected.value;\n\t        }\n\t    }\n\t    return value;\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a promise.\n\t * Otherwise it is a fulfilled value.\n\t */\n\tQ.isPromise = isPromise;\n\tfunction isPromise(object) {\n\t    return object instanceof Promise;\n\t}\n\t\n\tQ.isPromiseAlike = isPromiseAlike;\n\tfunction isPromiseAlike(object) {\n\t    return isObject(object) && typeof object.then === \"function\";\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a pending promise, meaning not\n\t * fulfilled or rejected.\n\t */\n\tQ.isPending = isPending;\n\tfunction isPending(object) {\n\t    return isPromise(object) && object.inspect().state === \"pending\";\n\t}\n\t\n\tPromise.prototype.isPending = function () {\n\t    return this.inspect().state === \"pending\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a value or fulfilled\n\t * promise.\n\t */\n\tQ.isFulfilled = isFulfilled;\n\tfunction isFulfilled(object) {\n\t    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n\t}\n\t\n\tPromise.prototype.isFulfilled = function () {\n\t    return this.inspect().state === \"fulfilled\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a rejected promise.\n\t */\n\tQ.isRejected = isRejected;\n\tfunction isRejected(object) {\n\t    return isPromise(object) && object.inspect().state === \"rejected\";\n\t}\n\t\n\tPromise.prototype.isRejected = function () {\n\t    return this.inspect().state === \"rejected\";\n\t};\n\t\n\t//// BEGIN UNHANDLED REJECTION TRACKING\n\t\n\t// This promise library consumes exceptions thrown in handlers so they can be\n\t// handled by a subsequent promise.  The exceptions get added to this array when\n\t// they are created, and removed when they are handled.  Note that in ES6 or\n\t// shimmed environments, this would naturally be a `Set`.\n\tvar unhandledReasons = [];\n\tvar unhandledRejections = [];\n\tvar reportedUnhandledRejections = [];\n\tvar trackUnhandledRejections = true;\n\t\n\tfunction resetUnhandledRejections() {\n\t    unhandledReasons.length = 0;\n\t    unhandledRejections.length = 0;\n\t\n\t    if (!trackUnhandledRejections) {\n\t        trackUnhandledRejections = true;\n\t    }\n\t}\n\t\n\tfunction trackRejection(promise, reason) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n\t        Q.nextTick.runAfter(function () {\n\t            if (array_indexOf(unhandledRejections, promise) !== -1) {\n\t                process.emit(\"unhandledRejection\", reason, promise);\n\t                reportedUnhandledRejections.push(promise);\n\t            }\n\t        });\n\t    }\n\t\n\t    unhandledRejections.push(promise);\n\t    if (reason && typeof reason.stack !== \"undefined\") {\n\t        unhandledReasons.push(reason.stack);\n\t    } else {\n\t        unhandledReasons.push(\"(no stack) \" + reason);\n\t    }\n\t}\n\t\n\tfunction untrackRejection(promise) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t\n\t    var at = array_indexOf(unhandledRejections, promise);\n\t    if (at !== -1) {\n\t        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n\t            Q.nextTick.runAfter(function () {\n\t                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n\t                if (atReport !== -1) {\n\t                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n\t                    reportedUnhandledRejections.splice(atReport, 1);\n\t                }\n\t            });\n\t        }\n\t        unhandledRejections.splice(at, 1);\n\t        unhandledReasons.splice(at, 1);\n\t    }\n\t}\n\t\n\tQ.resetUnhandledRejections = resetUnhandledRejections;\n\t\n\tQ.getUnhandledReasons = function () {\n\t    // Make a copy so that consumers can't interfere with our internal state.\n\t    return unhandledReasons.slice();\n\t};\n\t\n\tQ.stopUnhandledRejectionTracking = function () {\n\t    resetUnhandledRejections();\n\t    trackUnhandledRejections = false;\n\t};\n\t\n\tresetUnhandledRejections();\n\t\n\t//// END UNHANDLED REJECTION TRACKING\n\t\n\t/**\n\t * Constructs a rejected promise.\n\t * @param reason value describing the failure\n\t */\n\tQ.reject = reject;\n\tfunction reject(reason) {\n\t    var rejection = Promise({\n\t        \"when\": function (rejected) {\n\t            // note that the error has been handled\n\t            if (rejected) {\n\t                untrackRejection(this);\n\t            }\n\t            return rejected ? rejected(reason) : this;\n\t        }\n\t    }, function fallback() {\n\t        return this;\n\t    }, function inspect() {\n\t        return { state: \"rejected\", reason: reason };\n\t    });\n\t\n\t    // Note that the reason has not been handled.\n\t    trackRejection(rejection, reason);\n\t\n\t    return rejection;\n\t}\n\t\n\t/**\n\t * Constructs a fulfilled promise for an immediate reference.\n\t * @param value immediate reference\n\t */\n\tQ.fulfill = fulfill;\n\tfunction fulfill(value) {\n\t    return Promise({\n\t        \"when\": function () {\n\t            return value;\n\t        },\n\t        \"get\": function (name) {\n\t            return value[name];\n\t        },\n\t        \"set\": function (name, rhs) {\n\t            value[name] = rhs;\n\t        },\n\t        \"delete\": function (name) {\n\t            delete value[name];\n\t        },\n\t        \"post\": function (name, args) {\n\t            // Mark Miller proposes that post with no name should apply a\n\t            // promised function.\n\t            if (name === null || name === void 0) {\n\t                return value.apply(void 0, args);\n\t            } else {\n\t                return value[name].apply(value, args);\n\t            }\n\t        },\n\t        \"apply\": function (thisp, args) {\n\t            return value.apply(thisp, args);\n\t        },\n\t        \"keys\": function () {\n\t            return object_keys(value);\n\t        }\n\t    }, void 0, function inspect() {\n\t        return { state: \"fulfilled\", value: value };\n\t    });\n\t}\n\t\n\t/**\n\t * Converts thenables to Q promises.\n\t * @param promise thenable promise\n\t * @returns a Q promise\n\t */\n\tfunction coerce(promise) {\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        try {\n\t            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n\t        } catch (exception) {\n\t            deferred.reject(exception);\n\t        }\n\t    });\n\t    return deferred.promise;\n\t}\n\t\n\t/**\n\t * Annotates an object such that it will never be\n\t * transferred away from this process over any promise\n\t * communication channel.\n\t * @param object\n\t * @returns promise a wrapping of that object that\n\t * additionally responds to the \"isDef\" message\n\t * without a rejection.\n\t */\n\tQ.master = master;\n\tfunction master(object) {\n\t    return Promise({\n\t        \"isDef\": function () {}\n\t    }, function fallback(op, args) {\n\t        return dispatch(object, op, args);\n\t    }, function () {\n\t        return Q(object).inspect();\n\t    });\n\t}\n\t\n\t/**\n\t * Spreads the values of a promised array of arguments into the\n\t * fulfillment callback.\n\t * @param fulfilled callback that receives variadic arguments from the\n\t * promised array\n\t * @param rejected callback that receives the exception if the promise\n\t * is rejected.\n\t * @returns a promise for the return value or thrown exception of\n\t * either callback.\n\t */\n\tQ.spread = spread;\n\tfunction spread(value, fulfilled, rejected) {\n\t    return Q(value).spread(fulfilled, rejected);\n\t}\n\t\n\tPromise.prototype.spread = function (fulfilled, rejected) {\n\t    return this.all().then(function (array) {\n\t        return fulfilled.apply(void 0, array);\n\t    }, rejected);\n\t};\n\t\n\t/**\n\t * The async function is a decorator for generator functions, turning\n\t * them into asynchronous generators.  Although generators are only part\n\t * of the newest ECMAScript 6 drafts, this code does not cause syntax\n\t * errors in older engines.  This code should continue to work and will\n\t * in fact improve over time as the language improves.\n\t *\n\t * ES6 generators are currently part of V8 version 3.19 with the\n\t * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n\t * for longer, but under an older Python-inspired form.  This function\n\t * works on both kinds of generators.\n\t *\n\t * Decorates a generator function such that:\n\t *  - it may yield promises\n\t *  - execution will continue when that promise is fulfilled\n\t *  - the value of the yield expression will be the fulfilled value\n\t *  - it returns a promise for the return value (when the generator\n\t *    stops iterating)\n\t *  - the decorated function returns a promise for the return value\n\t *    of the generator or the first rejected promise among those\n\t *    yielded.\n\t *  - if an error is thrown in the generator, it propagates through\n\t *    every following yield until it is caught, or until it escapes\n\t *    the generator function altogether, and is translated into a\n\t *    rejection for the promise returned by the decorated generator.\n\t */\n\tQ.async = async;\n\tfunction async(makeGenerator) {\n\t    return function () {\n\t        // when verb is \"send\", arg is a value\n\t        // when verb is \"throw\", arg is an exception\n\t        function continuer(verb, arg) {\n\t            var result;\n\t\n\t            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n\t            // engine that has a deployed base of browsers that support generators.\n\t            // However, SM's generators use the Python-inspired semantics of\n\t            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n\t            // like to make it possible to use generators in deployed browsers, so\n\t            // we also support Python-style generators.  At some point we can remove\n\t            // this block.\n\t\n\t            if (typeof StopIteration === \"undefined\") {\n\t                // ES6 Generators\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    return reject(exception);\n\t                }\n\t                if (result.done) {\n\t                    return Q(result.value);\n\t                } else {\n\t                    return when(result.value, callback, errback);\n\t                }\n\t            } else {\n\t                // SpiderMonkey Generators\n\t                // FIXME: Remove this case when SM does ES6 generators.\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    if (isStopIteration(exception)) {\n\t                        return Q(exception.value);\n\t                    } else {\n\t                        return reject(exception);\n\t                    }\n\t                }\n\t                return when(result, callback, errback);\n\t            }\n\t        }\n\t        var generator = makeGenerator.apply(this, arguments);\n\t        var callback = continuer.bind(continuer, \"next\");\n\t        var errback = continuer.bind(continuer, \"throw\");\n\t        return callback();\n\t    };\n\t}\n\t\n\t/**\n\t * The spawn function is a small wrapper around async that immediately\n\t * calls the generator and also ends the promise chain, so that any\n\t * unhandled errors are thrown instead of forwarded to the error\n\t * handler. This is useful because it's extremely common to run\n\t * generators at the top-level to work with libraries.\n\t */\n\tQ.spawn = spawn;\n\tfunction spawn(makeGenerator) {\n\t    Q.done(Q.async(makeGenerator)());\n\t}\n\t\n\t// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\t/**\n\t * Throws a ReturnValue exception to stop an asynchronous generator.\n\t *\n\t * This interface is a stop-gap measure to support generator return\n\t * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n\t * generators like Chromium 29, just use \"return\" in your generator\n\t * functions.\n\t *\n\t * @param value the return value for the surrounding generator\n\t * @throws ReturnValue exception with the value.\n\t * @example\n\t * // ES6 style\n\t * Q.async(function* () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      return foo + bar;\n\t * })\n\t * // Older SpiderMonkey style\n\t * Q.async(function () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      Q.return(foo + bar);\n\t * })\n\t */\n\tQ[\"return\"] = _return;\n\tfunction _return(value) {\n\t    throw new QReturnValue(value);\n\t}\n\t\n\t/**\n\t * The promised function decorator ensures that any promise arguments\n\t * are settled and passed as values (`this` is also settled and passed\n\t * as a value).  It will also ensure that the result of a function is\n\t * always a promise.\n\t *\n\t * @example\n\t * var add = Q.promised(function (a, b) {\n\t *     return a + b;\n\t * });\n\t * add(Q(a), Q(B));\n\t *\n\t * @param {function} callback The function to decorate\n\t * @returns {function} a function that has been decorated.\n\t */\n\tQ.promised = promised;\n\tfunction promised(callback) {\n\t    return function () {\n\t        return spread([this, all(arguments)], function (self, args) {\n\t            return callback.apply(self, args);\n\t        });\n\t    };\n\t}\n\t\n\t/**\n\t * sends a message to a value in a future turn\n\t * @param object* the recipient\n\t * @param op the name of the message operation, e.g., \"when\",\n\t * @param args further arguments to be forwarded to the operation\n\t * @returns result {Promise} a promise for the result of the operation\n\t */\n\tQ.dispatch = dispatch;\n\tfunction dispatch(object, op, args) {\n\t    return Q(object).dispatch(op, args);\n\t}\n\t\n\tPromise.prototype.dispatch = function (op, args) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(deferred.resolve, op, args);\n\t    });\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Gets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to get\n\t * @return promise for the property value\n\t */\n\tQ.get = function (object, key) {\n\t    return Q(object).dispatch(\"get\", [key]);\n\t};\n\t\n\tPromise.prototype.get = function (key) {\n\t    return this.dispatch(\"get\", [key]);\n\t};\n\t\n\t/**\n\t * Sets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for object object\n\t * @param name      name of property to set\n\t * @param value     new value of property\n\t * @return promise for the return value\n\t */\n\tQ.set = function (object, key, value) {\n\t    return Q(object).dispatch(\"set\", [key, value]);\n\t};\n\t\n\tPromise.prototype.set = function (key, value) {\n\t    return this.dispatch(\"set\", [key, value]);\n\t};\n\t\n\t/**\n\t * Deletes a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to delete\n\t * @return promise for the return value\n\t */\n\tQ.del = // XXX legacy\n\tQ[\"delete\"] = function (object, key) {\n\t    return Q(object).dispatch(\"delete\", [key]);\n\t};\n\t\n\tPromise.prototype.del = // XXX legacy\n\tPromise.prototype[\"delete\"] = function (key) {\n\t    return this.dispatch(\"delete\", [key]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param value     a value to post, typically an array of\n\t *                  invocation arguments for promises that\n\t *                  are ultimately backed with `resolve` values,\n\t *                  as opposed to those backed with URLs\n\t *                  wherein the posted value can be any\n\t *                  JSON serializable object.\n\t * @return promise for the return value\n\t */\n\t// bound locally because it is used by other methods\n\tQ.mapply = // XXX As proposed by \"Redsandro\"\n\tQ.post = function (object, name, args) {\n\t    return Q(object).dispatch(\"post\", [name, args]);\n\t};\n\t\n\tPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.post = function (name, args) {\n\t    return this.dispatch(\"post\", [name, args]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param ...args   array of invocation arguments\n\t * @return promise for the return value\n\t */\n\tQ.send = // XXX Mark Miller's proposed parlance\n\tQ.mcall = // XXX As proposed by \"Redsandro\"\n\tQ.invoke = function (object, name /*...args*/) {\n\t    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n\t};\n\t\n\tPromise.prototype.send = // XXX Mark Miller's proposed parlance\n\tPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.invoke = function (name /*...args*/) {\n\t    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n\t};\n\t\n\t/**\n\t * Applies the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param args      array of application arguments\n\t */\n\tQ.fapply = function (object, args) {\n\t    return Q(object).dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\tPromise.prototype.fapply = function (args) {\n\t    return this.dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\t/**\n\t * Calls the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ[\"try\"] =\n\tQ.fcall = function (object /* ...args*/) {\n\t    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n\t};\n\t\n\tPromise.prototype.fcall = function (/*...args*/) {\n\t    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n\t};\n\t\n\t/**\n\t * Binds the promised function, transforming return values into a fulfilled\n\t * promise and thrown errors into a rejected one.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ.fbind = function (object /*...args*/) {\n\t    var promise = Q(object);\n\t    var args = array_slice(arguments, 1);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\tPromise.prototype.fbind = function (/*...args*/) {\n\t    var promise = this;\n\t    var args = array_slice(arguments);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\t\n\t/**\n\t * Requests the names of the owned properties of a promised\n\t * object in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @return promise for the keys of the eventually settled object\n\t */\n\tQ.keys = function (object) {\n\t    return Q(object).dispatch(\"keys\", []);\n\t};\n\t\n\tPromise.prototype.keys = function () {\n\t    return this.dispatch(\"keys\", []);\n\t};\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array.  If any of\n\t * the promises gets rejected, the whole array is rejected immediately.\n\t * @param {Array*} an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns a promise for an array of the corresponding values\n\t */\n\t// By Mark Miller\n\t// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\tQ.all = all;\n\tfunction all(promises) {\n\t    return when(promises, function (promises) {\n\t        var pendingCount = 0;\n\t        var deferred = defer();\n\t        array_reduce(promises, function (undefined, promise, index) {\n\t            var snapshot;\n\t            if (\n\t                isPromise(promise) &&\n\t                (snapshot = promise.inspect()).state === \"fulfilled\"\n\t            ) {\n\t                promises[index] = snapshot.value;\n\t            } else {\n\t                ++pendingCount;\n\t                when(\n\t                    promise,\n\t                    function (value) {\n\t                        promises[index] = value;\n\t                        if (--pendingCount === 0) {\n\t                            deferred.resolve(promises);\n\t                        }\n\t                    },\n\t                    deferred.reject,\n\t                    function (progress) {\n\t                        deferred.notify({ index: index, value: progress });\n\t                    }\n\t                );\n\t            }\n\t        }, void 0);\n\t        if (pendingCount === 0) {\n\t            deferred.resolve(promises);\n\t        }\n\t        return deferred.promise;\n\t    });\n\t}\n\t\n\tPromise.prototype.all = function () {\n\t    return all(this);\n\t};\n\t\n\t/**\n\t * Returns the first resolved promise of an array. Prior rejected promises are\n\t * ignored.  Rejects only if all promises are rejected.\n\t * @param {Array*} an array containing values or promises for values\n\t * @returns a promise fulfilled with the value of the first resolved promise,\n\t * or a rejected promise if all promises are rejected.\n\t */\n\tQ.any = any;\n\t\n\tfunction any(promises) {\n\t    if (promises.length === 0) {\n\t        return Q.resolve();\n\t    }\n\t\n\t    var deferred = Q.defer();\n\t    var pendingCount = 0;\n\t    array_reduce(promises, function (prev, current, index) {\n\t        var promise = promises[index];\n\t\n\t        pendingCount++;\n\t\n\t        when(promise, onFulfilled, onRejected, onProgress);\n\t        function onFulfilled(result) {\n\t            deferred.resolve(result);\n\t        }\n\t        function onRejected() {\n\t            pendingCount--;\n\t            if (pendingCount === 0) {\n\t                deferred.reject(new Error(\n\t                    \"Can't get fulfillment value from any promise, all \" +\n\t                    \"promises were rejected.\"\n\t                ));\n\t            }\n\t        }\n\t        function onProgress(progress) {\n\t            deferred.notify({\n\t                index: index,\n\t                value: progress\n\t            });\n\t        }\n\t    }, undefined);\n\t\n\t    return deferred.promise;\n\t}\n\t\n\tPromise.prototype.any = function () {\n\t    return any(this);\n\t};\n\t\n\t/**\n\t * Waits for all promises to be settled, either fulfilled or\n\t * rejected.  This is distinct from `all` since that would stop\n\t * waiting at the first rejection.  The promise returned by\n\t * `allResolved` will never be rejected.\n\t * @param promises a promise for an array (or an array) of promises\n\t * (or values)\n\t * @return a promise for an array of promises\n\t */\n\tQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\tfunction allResolved(promises) {\n\t    return when(promises, function (promises) {\n\t        promises = array_map(promises, Q);\n\t        return when(all(array_map(promises, function (promise) {\n\t            return when(promise, noop, noop);\n\t        })), function () {\n\t            return promises;\n\t        });\n\t    });\n\t}\n\t\n\tPromise.prototype.allResolved = function () {\n\t    return allResolved(this);\n\t};\n\t\n\t/**\n\t * @see Promise#allSettled\n\t */\n\tQ.allSettled = allSettled;\n\tfunction allSettled(promises) {\n\t    return Q(promises).allSettled();\n\t}\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array of their states (as\n\t * returned by `inspect`) when they have all settled.\n\t * @param {Array[Any*]} values an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns {Array[State]} an array of states for the respective values.\n\t */\n\tPromise.prototype.allSettled = function () {\n\t    return this.then(function (promises) {\n\t        return all(array_map(promises, function (promise) {\n\t            promise = Q(promise);\n\t            function regardless() {\n\t                return promise.inspect();\n\t            }\n\t            return promise.then(regardless, regardless);\n\t        }));\n\t    });\n\t};\n\t\n\t/**\n\t * Captures the failure of a promise, giving an oportunity to recover\n\t * with a callback.  If the given promise is fulfilled, the returned\n\t * promise is fulfilled.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to fulfill the returned promise if the\n\t * given promise is rejected\n\t * @returns a promise for the return value of the callback\n\t */\n\tQ.fail = // XXX legacy\n\tQ[\"catch\"] = function (object, rejected) {\n\t    return Q(object).then(void 0, rejected);\n\t};\n\t\n\tPromise.prototype.fail = // XXX legacy\n\tPromise.prototype[\"catch\"] = function (rejected) {\n\t    return this.then(void 0, rejected);\n\t};\n\t\n\t/**\n\t * Attaches a listener that can respond to progress notifications from a\n\t * promise's originating deferred. This listener receives the exact arguments\n\t * passed to ``deferred.notify``.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to receive any progress notifications\n\t * @returns the given promise, unchanged\n\t */\n\tQ.progress = progress;\n\tfunction progress(object, progressed) {\n\t    return Q(object).then(void 0, void 0, progressed);\n\t}\n\t\n\tPromise.prototype.progress = function (progressed) {\n\t    return this.then(void 0, void 0, progressed);\n\t};\n\t\n\t/**\n\t * Provides an opportunity to observe the settling of a promise,\n\t * regardless of whether the promise is fulfilled or rejected.  Forwards\n\t * the resolution to the returned promise when the callback is done.\n\t * The callback can return a promise to defer completion.\n\t * @param {Any*} promise\n\t * @param {Function} callback to observe the resolution of the given\n\t * promise, takes no arguments.\n\t * @returns a promise for the resolution of the given promise when\n\t * ``fin`` is done.\n\t */\n\tQ.fin = // XXX legacy\n\tQ[\"finally\"] = function (object, callback) {\n\t    return Q(object)[\"finally\"](callback);\n\t};\n\t\n\tPromise.prototype.fin = // XXX legacy\n\tPromise.prototype[\"finally\"] = function (callback) {\n\t    callback = Q(callback);\n\t    return this.then(function (value) {\n\t        return callback.fcall().then(function () {\n\t            return value;\n\t        });\n\t    }, function (reason) {\n\t        // TODO attempt to recycle the rejection with \"this\".\n\t        return callback.fcall().then(function () {\n\t            throw reason;\n\t        });\n\t    });\n\t};\n\t\n\t/**\n\t * Terminates a chain of promises, forcing rejections to be\n\t * thrown as exceptions.\n\t * @param {Any*} promise at the end of a chain of promises\n\t * @returns nothing\n\t */\n\tQ.done = function (object, fulfilled, rejected, progress) {\n\t    return Q(object).done(fulfilled, rejected, progress);\n\t};\n\t\n\tPromise.prototype.done = function (fulfilled, rejected, progress) {\n\t    var onUnhandledError = function (error) {\n\t        // forward to a future turn so that ``when``\n\t        // does not catch it and turn it into a rejection.\n\t        Q.nextTick(function () {\n\t            makeStackTraceLong(error, promise);\n\t            if (Q.onerror) {\n\t                Q.onerror(error);\n\t            } else {\n\t                throw error;\n\t            }\n\t        });\n\t    };\n\t\n\t    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\t    var promise = fulfilled || rejected || progress ?\n\t        this.then(fulfilled, rejected, progress) :\n\t        this;\n\t\n\t    if (typeof process === \"object\" && process && process.domain) {\n\t        onUnhandledError = process.domain.bind(onUnhandledError);\n\t    }\n\t\n\t    promise.then(void 0, onUnhandledError);\n\t};\n\t\n\t/**\n\t * Causes a promise to be rejected if it does not get fulfilled before\n\t * some milliseconds time out.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds timeout\n\t * @param {Any*} custom error message or Error object (optional)\n\t * @returns a promise for the resolution of the given promise if it is\n\t * fulfilled before the timeout, otherwise rejected.\n\t */\n\tQ.timeout = function (object, ms, error) {\n\t    return Q(object).timeout(ms, error);\n\t};\n\t\n\tPromise.prototype.timeout = function (ms, error) {\n\t    var deferred = defer();\n\t    var timeoutId = setTimeout(function () {\n\t        if (!error || \"string\" === typeof error) {\n\t            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n\t            error.code = \"ETIMEDOUT\";\n\t        }\n\t        deferred.reject(error);\n\t    }, ms);\n\t\n\t    this.then(function (value) {\n\t        clearTimeout(timeoutId);\n\t        deferred.resolve(value);\n\t    }, function (exception) {\n\t        clearTimeout(timeoutId);\n\t        deferred.reject(exception);\n\t    }, deferred.notify);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Returns a promise for the given value (or promised value), some\n\t * milliseconds after it resolved. Passes rejections immediately.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds\n\t * @returns a promise for the resolution of the given promise after milliseconds\n\t * time has elapsed since the resolution of the given promise.\n\t * If the given promise rejects, that is passed immediately.\n\t */\n\tQ.delay = function (object, timeout) {\n\t    if (timeout === void 0) {\n\t        timeout = object;\n\t        object = void 0;\n\t    }\n\t    return Q(object).delay(timeout);\n\t};\n\t\n\tPromise.prototype.delay = function (timeout) {\n\t    return this.then(function (value) {\n\t        var deferred = defer();\n\t        setTimeout(function () {\n\t            deferred.resolve(value);\n\t        }, timeout);\n\t        return deferred.promise;\n\t    });\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided as an array, and returns a promise.\n\t *\n\t *      Q.nfapply(FS.readFile, [__filename])\n\t *      .then(function (content) {\n\t *      })\n\t *\n\t */\n\tQ.nfapply = function (callback, args) {\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfapply = function (args) {\n\t    var deferred = defer();\n\t    var nodeArgs = array_slice(args);\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided individually, and returns a promise.\n\t * @example\n\t * Q.nfcall(FS.readFile, __filename)\n\t * .then(function (content) {\n\t * })\n\t *\n\t */\n\tQ.nfcall = function (callback /*...args*/) {\n\t    var args = array_slice(arguments, 1);\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfcall = function (/*...args*/) {\n\t    var nodeArgs = array_slice(arguments);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Wraps a NodeJS continuation passing function and returns an equivalent\n\t * version that returns a promise.\n\t * @example\n\t * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n\t * .then(console.log)\n\t * .done()\n\t */\n\tQ.nfbind =\n\tQ.denodeify = function (callback /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 1);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nfbind =\n\tPromise.prototype.denodeify = function (/*...args*/) {\n\t    var args = array_slice(arguments);\n\t    args.unshift(this);\n\t    return Q.denodeify.apply(void 0, args);\n\t};\n\t\n\tQ.nbind = function (callback, thisp /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 2);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        function bound() {\n\t            return callback.apply(thisp, arguments);\n\t        }\n\t        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nbind = function (/*thisp, ...args*/) {\n\t    var args = array_slice(arguments, 0);\n\t    args.unshift(this);\n\t    return Q.nbind.apply(void 0, args);\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback with a given array of arguments, plus a provided callback.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param {Array} args arguments to pass to the method; the callback\n\t * will be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nmapply = // XXX As proposed by \"Redsandro\"\n\tQ.npost = function (object, name, args) {\n\t    return Q(object).npost(name, args);\n\t};\n\t\n\tPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.npost = function (name, args) {\n\t    var nodeArgs = array_slice(args || []);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback, forwarding the given variadic arguments, plus a provided\n\t * callback argument.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param ...args arguments to pass to the method; the callback will\n\t * be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tQ.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tQ.ninvoke = function (object, name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 2);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\tPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tPromise.prototype.ninvoke = function (name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 1);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * If a function would like to support both Node continuation-passing-style and\n\t * promise-returning-style, it can end its internal promise chain with\n\t * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n\t * elects to use a nodeback, the result will be sent there.  If they do not\n\t * pass a nodeback, they will receive the result promise.\n\t * @param object a result (or a promise for a result)\n\t * @param {Function} nodeback a Node.js-style callback\n\t * @returns either the promise or nothing\n\t */\n\tQ.nodeify = nodeify;\n\tfunction nodeify(object, nodeback) {\n\t    return Q(object).nodeify(nodeback);\n\t}\n\t\n\tPromise.prototype.nodeify = function (nodeback) {\n\t    if (nodeback) {\n\t        this.then(function (value) {\n\t            Q.nextTick(function () {\n\t                nodeback(null, value);\n\t            });\n\t        }, function (error) {\n\t            Q.nextTick(function () {\n\t                nodeback(error);\n\t            });\n\t        });\n\t    } else {\n\t        return this;\n\t    }\n\t};\n\t\n\tQ.noConflict = function() {\n\t    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n\t};\n\t\n\t// All code before this point will be filtered from stack traces.\n\tvar qEndingLine = captureLine();\n\t\n\treturn Q;\n\t\n\t});\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3).setImmediate))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(2).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).setImmediate, __webpack_require__(3).clearImmediate))\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** BPGFramePlayer.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e2257888992e6a937f40\n **/","import Q from 'q';\n\n/**\n * BPG Frame Player class\n * @class BPGFramePlayer\n */\nexport default class BPGFramePlayer{\n\n  /**\n   * @typedef BPGFramePlayerOptions\n   * @type Object\n   * @property {object} node Dom node to append player to.\n   * @property {int} width Width of player\n   * @property {int} height Height of player\n   * @property {boolean} loop Loop frames?\n   * @property {boolean} autoplay Autoplay sequence?\n   * @property {string} url URL to the BPH file\n   * @property {float} fps FPS for the sequence player\n   * @property {string} workerUrl Where to load the webworker from\n   */\n\n  /**\n   * BPGFramePlayer constructor.\n   * @param {BPGFramePlayerOptions} options The default options of the frame player\n   * @constructs BPGFramePlayer\n   */\n  constructor( options ){\n    const noop = function(){};\n\n    const defaultOptions = {\n      node: document.querySelector( '.bpg-frame-player' ),\n      width: 600,\n      height: 300,\n      loop: true,\n      autoplay: true,\n      fps: 30,\n      workerUrl: '../lib/bpgdecoder.js',\n      onFrameUpdate: noop,\n      onComplete: noop,\n      onLoaded: noop\n    }\n    \n    this.options = Object.assign( defaultOptions, options );\n    \n    this.playing = this.options.autoplay;\n    this.frameIndex = 0;\n    this.workerId = ( ( ( 1 + Math.random() ) * 0x10000 ) | 0 ).toString( 16 ).substring( 1 );\n\n    if( !this.options.url ){\n      throw new Error( 'A BPG url is needed.' );\n    }\n\n    if( !window.Worker ){\n      throw new Error( 'Cannot decode BPG files without web workers. See: http://caniuse.com/#feat=webworkers' );\n    }\n\n    this.createCanvas();\n\n    Q.fcall( this.load.bind( this ) )\n      .then( this.setupWorker.bind( this ) )\n      .then( this.onLoaded.bind( this ) )\n      .done();\n  }\n\n  createCanvas(){\n    this.bpgCanvas = document.createElement( 'canvas' );\n    this.bpgCanvas.width = this.options.width;\n    this.bpgCanvas.height = this.options.height;\n    this.bpgCanvas.classList.add( 'bpg-frame-player' );\n\n    this.options.node.appendChild( this.bpgCanvas );\n    this.ctx = this.bpgCanvas.getContext( '2d' );\n  }\n\n  load(){\n    let request = new XMLHttpRequest();\n    let deferred = Q.defer();\n    \n    this.options.node.classList.add( 'bpg-frame-player-loading' );\n\n    request.open( 'get', this.options.url, true );\n    request.responseType = 'arraybuffer';\n    request.onload = ( event )=> {\n      this.log( 'Requested: ' + this.options.url );\n      deferred.resolve( request.response );\n    }\n    request.send();\n\n    return deferred.promise;\n  }\n\n  setupWorker( bpgData ){\n    let deferred = Q.defer(),\n        worker = new Worker( this.options.workerUrl );\n   \n    worker.addEventListener( 'message', ( e )=> {\n      if( e.data.type === 'log' ){\n        this.log( 'Decoding BPG: ' + e.data.message );\n      }\n\n      if( e.data.type === 'res' ){\n        worker.terminate();\n        this.log( 'Decoded BPG: ' + this.options.url );\n        deferred.resolve( e.data );\n      }\n    } );\n    \n    worker.postMessage( { type: 'image', img: bpgData, meta: this.workerId } );\n\n    return deferred.promise;\n  }\n\n  onLoaded( bpgDecodedData ){\n    this.frames = bpgDecodedData.frames;\n    \n    this.options.node.classList.remove( 'bpg-frame-player-loading' );\n\n    // start sequence based on duration between first and second frame\n    setTimeout( ()=> { \n      requestAnimationFrame( this.renderFrame.bind( this ) );\n    }, this.frames[ 0 ].duration );\n    \n    // render first frame\n    this.draw( 0 );\n\n    this.options.onLoaded( this.frames );\n  }\n\n  log( msg ){\n    console.log( msg );\n  }\n\n  goToFrame( frame ){\n    this.frameIndex = Math.min( Math.max( frame, 0 ), this.frames.length - 1 );\n    this.draw( this.frameIndex );\n  }\n\n  play(){\n    this.playing = true;\n  } \n\n  pause(){\n    this.playing = false;\n  } \n\n  renderFrame(){\n    if( this.playing ){\n      if( ++this.frameIndex >= this.frames.length ){\n        if( this.options.loop ){\n          this.frameIndex = 0;\n        }\n        else {\n          this.frameIndex = this.frames.length - 1;\n          this.pause();\n          this.options.onComplete( this.frameIndex );\n        }\n      }\n      \n      this.draw( this.frameIndex );\n    }\n\n    let dur = this.frames[ this.frameIndex ].duration;\n    setTimeout( ()=> { \n      requestAnimationFrame( this.renderFrame.bind( this ) );\n    }, dur );\n  }\n\n  draw( frame ){\n    this.options.onFrameUpdate( frame, this.frames.length - 1 );\n    this.ctx.putImageData( this.frames[ frame ].img, 0, 0 );\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/q/q.js\n ** module id = 1\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/process/browser.js\n ** module id = 2\n ** module chunks = 0\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/timers-browserify/main.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}